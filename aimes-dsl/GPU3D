EXTERN: GVAL uint64_t size_t MPI_Request

INCLUDEPATHS:
.
ENDINCLUDEPATHS

SPECIFIERS: SPECIFIER(loc=CELL|EDGE) SPECIFIER(dim=3D|2D)

DECLARATIONS:
 SUBSTITUTE CELL WITH NOTHING
 SUBSTITUTE EDGE WITH NOTHING
 SUBSTITUTE 3D WITH NOTHING
 SUBSTITUTE 2D WITH NOTHING
 DATAPOINTER 3D -> data_pointer . p3
 DATAPOINTER 2D -> data_pointer . p2
VARIABLESTRUCTURE:
struct{
char*name;
int loc;
int dim;
union{$data_type *restrict *restrict p2;$data_type *restrict *restrict *restrict p3;}data_pointer;
}
ENDVARIABLESTRUCTURE
ENDDECLARATIONS

ALLOCATIONS:
GLOBALVARS:
 int local_cell_blocks;
 int local_edge_blocks;
ENDGLOBALVARS
 CASE loc=CELL & dim=3D:
 {
            int num_blocks = local_cell_blocks?local_cell_blocks:(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
            $var_name = malloc(24);
            $var_name->name = "$var_name";
            $var_name->loc = 0;
            $var_name->dim = 3;
            $var_name->data_pointer.p3 = malloc((num_blocks*g->height*g->blkSize)*sizeof($data_type) +(num_blocks*g->height)*sizeof(char*) + (num_blocks)*sizeof(char*));
            char* pos = (char*)$var_name->data_pointer.p3 + num_blocks*sizeof(char*);
            char* pos2 = (char*)$var_name->data_pointer.p3 + num_blocks*sizeof(char*) + num_blocks*g->height*sizeof(char*);
            for(int b=0;b<num_blocks;b++){
                $var_name->data_pointer.p3[b] = ($data_type**)pos;
                pos+=g->height*sizeof(char*);
                for(int k=0;k<g->height;k++){
                    $var_name->data_pointer.p3[b][k] = ($data_type*)pos2;
                    pos2+=g->blkSize*sizeof($data_type);
                    for(int c=0;c<g->blkSize;c++){
                        $var_name->data_pointer.p3[b][k][c] = ($data_type)0;
                    }
                }
            }
 }
 ENDCASE
 CASE loc=CELL & dim=2D:
 {
            int num_blocks = local_cell_blocks?local_cell_blocks:(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
            $var_name = malloc(24);
            $var_name->name = "$var_name";
            $var_name->loc = 0;
            $var_name->dim = 2;
            $var_name->data_pointer.p2 = malloc((num_blocks*g->blkSize)*sizeof($data_type)+(num_blocks)*sizeof(char*));
            char* pos = (char*)$var_name->data_pointer.p2 + num_blocks*sizeof(char*);
            for(int b=0;b<num_blocks;b++){
                $var_name->data_pointer.p2[b] = ($data_type*)pos;
                pos+=g->blkSize*sizeof($data_type);
                    for(int c=0;c<g->blkSize;c++){
                        $var_name->data_pointer.p2[b][c] = ($data_type)0;
                    }
            }
 }
 ENDCASE
 CASE loc=EDGE & dim=3D:
 {
            int num_blocks = local_edge_blocks?local_edge_blocks:(((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
            $var_name = malloc(24);
            $var_name->name = "$var_name";
            $var_name->loc = 1;
            $var_name->dim = 3;
            $var_name->data_pointer.p3 = malloc((num_blocks*g->height*g->blkSize)*sizeof($data_type) +(num_blocks*g->height)*sizeof(char*) + (num_blocks)*sizeof(char*));
            char* pos = (char*)$var_name->data_pointer.p3 + num_blocks*sizeof(char*);
            char* pos2 = (char*)$var_name->data_pointer.p3 + num_blocks*sizeof(char*) + num_blocks*g->height*sizeof(char*);
            for(int b=0;b<num_blocks;b++){
                $var_name->data_pointer.p3[b] = ($data_type**)pos;
                pos+=g->height*sizeof(char*);
                for(int k=0;k<g->height;k++){
                    $var_name->data_pointer.p3[b][k] = ($data_type*)pos2;
                    pos2+=g->blkSize*sizeof($data_type);
                    for(int e=0;e<g->blkSize;e++){
                        $var_name->data_pointer.p3[b][k][e] = ($data_type)0;
                    }
                }
            }
 }
 ENDCASE
 CASE loc=EDGE & dim=2D:
 {
            int num_blocks = local_edge_blocks?local_edge_blocks:(((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
            $var_name = malloc(24);
            $var_name->name = "$var_name";
            $var_name->loc = 1;
            $var_name->dim = 2;
            $var_name->data_pointer.p2 = malloc((num_blocks*g->blkSize)*sizeof($data_type)+(num_blocks)*sizeof(char*));
            char* pos = (char*)$var_name->data_pointer.p2 + num_blocks*sizeof(char*);
            for(int b=0;b<num_blocks;b++){
                $var_name->data_pointer.p2[b] = ($data_type*)pos;
                pos+=g->blkSize*sizeof($data_type);
                    for(int e=0;e<g->blkSize;e++){
                        $var_name->data_pointer.p2[b][e] = ($data_type)0;
                    }
            }
 }
 ENDCASE
ENDALLOCATIONS

DEALLOCATIONS:
 CASE loc=CELL & dim=3D:
  free((void*)$var_name->data_pointer.p3);
  free((void*)$var_name);
 ENDCASE
 CASE loc=CELL & dim=2D:
  free((void*)$var_name->data_pointer.p2);
  free((void*)$var_name);
 ENDCASE
 CASE loc=EDGE & dim=3D:
  free((void*)$var_name->data_pointer.p3);
  free((void*)$var_name);
 ENDCASE
 CASE loc=EDGE & dim=2D:
  free((void*)$var_name->data_pointer.p2);
  free((void*)$var_name);
 ENDCASE
ENDDEALLOCATIONS

GLOBALDOMAIN:
 COMPONENT(CELL3D):
  RANGE OF block=0 TO g->cBlkCnt
  RANGE OF height= 0 TO g->height
  RANGE OF cell= 0 TO g->blkSize
 ENDCOMPONENT
 COMPONENT(EDGE3D):
  RANGE OF block=0 TO g->eBlkCnt
  RANGE OF height= 0 TO g->height
  RANGE OF edge= 0 TO g->blkSize
 ENDCOMPONENT
 COMPONENT(CELL2D):
  RANGE OF block=0 TO g->cBlkCnt
  RANGE OF cell= 0 TO g->blkSize
 ENDCOMPONENT
 COMPONENT(EDGE2D):
  RANGE OF block=0 TO g->eBlkCnt
  RANGE OF edge= 0 TO g->blkSize
 ENDCOMPONENT
 DEFAULT=CELL3D[CELL3D:cell,ce,c][EDGE3D:edge,ed,e]
ENDGLOBALDOMAIN

INDEXOPERATORS:
 above(): height=$height+1
 above(x): height=$height+$0
 below(): height=$height-1
 below(x): height=$height-$0
 neighbor(x): block=g->cNeighborBlk[$0][$iteratorIndex]
 neighbor(x): cell=g->cNeighborIdx[$0][$iteratorIndex]
 edge(x): block=g->cEdgeBlk[$0][$iteratorIndex]
 edge(x): edge=g->cEdgeIdx[$0][$iteratorIndex]
 cell(x): block=g->eCellBlk[$0][$iteratorIndex]
 cell(x): cell=g->eCellIdx[$0][$iteratorIndex]
 block(): RETURN=block
 height(): RETURN=height
 cell(): RETURN=cell
 edge(): RETURN=edge
 surface(): DROP=height
ENDINDEXOPERATORS

SPECIALEXPRESSIONS:
 TRANSLATE $iteratorIndex.block TO $block
 TRANSLATE $iteratorIndex.height TO $height
 TRANSLATE $iteratorIndex.cell TO $cell
 TRANSLATE $iteratorIndex.edge TO $edge
 TRANSLATE BOUNDARYEDGE($iteratorIndex) TO g->eCellBlk[0][$iteratorIndex]== -1||g->eCellBlk[1][$iteratorIndex]==-1
 TRANSLATE $iteratorIndex.cell(0).block TO g->eCellBlk[0][$iteratorIndex]
 TRANSLATE $iteratorIndex.cell(0).cell TO g->eCellIdx[0][$iteratorIndex]
 TRANSLATE $iteratorIndex.cell(1).block TO g->eCellBlk[1][$iteratorIndex]
 TRANSLATE $iteratorIndex.cell(1).cell TO g->eCellIdx[1][$iteratorIndex]
ENDSPECIALEXPRESSIONS

MEMORYLAYOUTS:
 LAYOUT(3):
  INDEX=$0
  INDEX=$1
  INDEX=$2
 ENDLAYOUT
 LAYOUT(2):
  INDEX=$0
  INDEX=$1
 ENDLAYOUT
ENDMEMORYLAYOUTS

ANNOTATIONS:
 LEVEL 0:pragma acc parallel loop gangs
 LEVEL -1:pragma acc loop vector
 DEFAULT:pragma acc loop worker
 TIMESTEPS: pragma acc data
ENDANNOTATIONS

DOMAINDECOMPOSITION:
 nodes=g->mpi_world_size
 processID=g->mpi_rank
 INCLUDE:<mpi.h>
 INITIALIZATION:
 {
  MPI_Init(NULL, NULL);
  MPI_Comm_size(MPI_COMM_WORLD, &g->mpi_world_size);
  MPI_Comm_rank(MPI_COMM_WORLD, &g->mpi_rank);
 }
 ENDINITIALIZATION
 FINALIZATION:
 {
  MPI_Finalize();
 }
 ENDFINALIZATION
ENDDOMAINDECOMPOSITION

COMMUNICATION:
COMMGLOBALS:
 int * cn_c;
 int * ce_c;
 int * ec_c;
 int * cn_crem;
 int * ce_crem;
 int * ec_crem;
 int * neighbor_map;
 int * cedge_map;
 int * ecell_map;
 int * neighbor_maprem;
 int * cedge_maprem;
 int * ecell_maprem;
 GVAL** neighbor_2Dbuf;
 GVAL** neighbor_3Dbuf;
 GVAL** cedge_2Dbuf;
 GVAL** cedge_3Dbuf;
 GVAL** ecell_2Dbuf;
 GVAL** ecell_3Dbuf;
 GVAL** neighbor_2Dbufrem;
 GVAL** neighbor_3Dbufrem;
 GVAL** cedge_2Dbufrem;
 GVAL** cedge_3Dbufrem;
 GVAL** ecell_2Dbufrem;
 GVAL** ecell_3Dbufrem;
 MPI_Request* mpi_send_requests;
 MPI_Request* mpi_recv_requests;
 int comm_tag;
ENDCOMMGLOBALS

COMMINITIALIZATION:
{
int cell_min=0;
int cell_max=g->mpi_rank >(g->cBlkCnt -1) / (((g->cBlkCnt) + g->mpi_world_size -1) / g->mpi_world_size) ? 0 : g->mpi_rank ==(g->cBlkCnt -1) / (((g->cBlkCnt) + g->mpi_world_size -1) / g->mpi_world_size) ? g->cBlkCnt % (((g->cBlkCnt) + g->mpi_world_size -1) /g->mpi_world_size) ? g->cBlkCnt % (((g->cBlkCnt) + g->mpi_world_size - 1) /g->mpi_world_size) : (((g->cBlkCnt) + g->mpi_world_size -1) /g->mpi_world_size) : (((g->cBlkCnt) +g->mpi_world_size -1) /g->mpi_world_size);
int edge_min=0;
int edge_max=g->mpi_rank >(g->eBlkCnt -1) / (((g->eBlkCnt) + g->mpi_world_size -1) / g->mpi_world_size) ? 0 : g->mpi_rank ==(g->eBlkCnt -1) / (((g->eBlkCnt) + g->mpi_world_size -1) / g->mpi_world_size) ? g->eBlkCnt % (((g->eBlkCnt) + g->mpi_world_size -1) /g->mpi_world_size) ? g->eBlkCnt % (((g->eBlkCnt) + g->mpi_world_size - 1) /g->mpi_world_size) : (((g->eBlkCnt) + g->mpi_world_size -1) /g->mpi_world_size) : (((g->eBlkCnt) +g->mpi_world_size -1) /g->mpi_world_size);

int * cn_H= malloc(g->mpi_world_size*sizeof(int)*2);
cn_c= malloc(g->mpi_world_size*sizeof(int));
for(int i=0;i<g->mpi_world_size;i++)cn_c[i]=0;
    for (int b = cell_min; b < cell_max; b++)
      {
    for (int c = (0); c < (g->blkSize); c++)
      {
    for (int n = (0); n < 3; n++)
      {
 if (g->cNeighborBlk[n]->data_pointer.p2[b][c]>=g->cBlkCnt)continue;
 if (g->cNeighborBlk[n]->data_pointer.p2[b][c]<g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_min
     ||g->cNeighborBlk[n]->data_pointer.p2[b][c]>=g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_max)
 {
  cn_c[g->cNeighborBlk[n]->data_pointer.p2[b][c]/(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size)]++;
 }
}
}
}
  cn_H[0]=cn_c[0]+cell_max*g->blkSize;
  for(int i=1;i<g->mpi_world_size;i++)
  {
    cn_H[2*i]=cn_c[i]+cn_H[2*i-2];
  }
 int ml =0;
 for(int i=0;i<g->mpi_world_size;i++)
 {
   ml+=cn_c[i];
 }
 neighbor_map= malloc(ml*sizeof(int)*5);
  for(int i=0;i<g->mpi_world_size;i++)
  {
    cn_H[2*i+1]=cn_H[2*i]%g->blkSize;
    cn_H[2*i]=cn_H[2*i]/g->blkSize;
  }

 int* tp= malloc(g->mpi_world_size*sizeof(int)*2);
 tp[0]=cell_max;
 tp[1]=0;
 for(int i=1;i<g->mpi_world_size;i++){tp[i*2]=cn_H[i*2-2];tp[i*2+1]=cn_H[i*2-1];}
 int* mi=malloc(g->mpi_world_size*sizeof(int));
 mi[0]=0;
 for(int i=1;i<g->mpi_world_size;i++)mi[i]=5*cn_c[i-1]+mi[i-1];
    for (int b = cell_min; b < cell_max; b++)
      {
    for (int c = (0); c < (g->blkSize); c++)
      {
    for (int n = (0); n < 3; n++)
      {
 if (g->cNeighborBlk[n]->data_pointer.p2[b][c]>=g->cBlkCnt||g->cNeighborBlk[n]->data_pointer.p2[b][c]<0){g->cNeighborBlk[n]->data_pointer.p2[b][c]=-1;}
 else if (g->cNeighborBlk[n]->data_pointer.p2[b][c]<g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_min
     ||g->cNeighborBlk[n]->data_pointer.p2[b][c]>=g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_max)
 {
  int pn = g->cNeighborBlk[n]->data_pointer.p2[b][c]/(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
  neighbor_map[mi[pn]++]=pn;
  neighbor_map[mi[pn]++]=g->cNeighborBlk[n]->data_pointer.p2[b][c]%(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
  neighbor_map[mi[pn]++]=g->cNeighborIdx[n]->data_pointer.p2[b][c];
  neighbor_map[mi[pn]++]=tp[pn*2];
  neighbor_map[mi[pn]++]=tp[pn*2+1];
  g->cNeighborBlk[n]->data_pointer.p2[b][c]=tp[pn*2];
  g->cNeighborIdx[n]->data_pointer.p2[b][c]=tp[pn*2+1];
  if(++tp[pn*2+1]==g->blkSize){tp[pn*2]++;tp[pn*2+1]=0;}
 }
 else
 {
   g->cNeighborBlk[n]->data_pointer.p2[b][c]=g->cNeighborBlk[n]->data_pointer.p2[b][c]%(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
 }
}
}
}





int * ce_H= malloc(g->mpi_world_size*sizeof(int)*2);
ce_c= malloc(g->mpi_world_size*sizeof(int));
for(int i=0;i<g->mpi_world_size;i++)ce_c[i]=0;
    for (int b = cell_min; b < cell_max; b++)
      {
    for (int c = (0); c < (g->blkSize); c++)
      {
    for (int n = (0); n < 3; n++)
      {
 if (g->cEdgeBlk[n]->data_pointer.p2[b][c]<g->mpi_rank*((((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+edge_min
     ||g->cEdgeBlk[n]->data_pointer.p2[b][c]>=g->mpi_rank*((((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+edge_max)
 {
  ce_c[g->cEdgeBlk[n]->data_pointer.p2[b][c]/(((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size)]++;
 }
}
}
}
  ce_H[0]=ce_c[0]+edge_max*g->blkSize;
  for(int i=1;i<g->mpi_world_size;i++)
  {
    ce_H[2*i]=ce_c[i]+ce_H[2*i-2];
  }
 ml =0;
 for(int i=0;i<g->mpi_world_size;i++)
 {
   ml+=ce_c[i];
 }
 cedge_map= malloc(ml*sizeof(int)*5);
  for(int i=0;i<g->mpi_world_size;i++)
  {
    ce_H[2*i+1]=ce_H[2*i]%g->blkSize;
    ce_H[2*i]=ce_H[2*i]/g->blkSize;
  }

 local_edge_blocks = ce_H[g->mpi_world_size*2-2]+1;
 tp[0]=edge_max;
 tp[1]=0;
 for(int i=1;i<g->mpi_world_size;i++){tp[i*2]=ce_H[i*2-2];tp[i*2+1]=ce_H[i*2-1];}
 mi[0]=0;
 for(int i=1;i<g->mpi_world_size;i++)mi[i]=5*ce_c[i-1]+mi[i-1];
    for (int b = cell_min; b < cell_max; b++)
      {
    for (int c = (0); c < (g->blkSize); c++)
      {
    for (int n = (0); n < 3; n++)
      {
 if (g->cEdgeBlk[n]->data_pointer.p2[b][c]<g->mpi_rank*((((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+edge_min
     ||g->cEdgeBlk[n]->data_pointer.p2[b][c]>=g->mpi_rank*((((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+edge_max)
 {
  int pn = g->cEdgeBlk[n]->data_pointer.p2[b][c]/(((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
  cedge_map[mi[pn]++]=pn;
  cedge_map[mi[pn]++]=g->cEdgeBlk[n]->data_pointer.p2[b][c]%(((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
  cedge_map[mi[pn]++]=g->cEdgeIdx[n]->data_pointer.p2[b][c];
  cedge_map[mi[pn]++]=tp[pn*2];
  cedge_map[mi[pn]++]=tp[pn*2+1];
  g->cEdgeBlk[n]->data_pointer.p2[b][c]=tp[pn*2];
  g->cEdgeIdx[n]->data_pointer.p2[b][c]=tp[pn*2+1];
  if(++tp[pn*2+1]==g->blkSize){tp[pn*2]++;tp[pn*2+1]=0;}
 }
 else
 {
   g->cEdgeBlk[n]->data_pointer.p2[b][c]=g->cEdgeBlk[n]->data_pointer.p2[b][c]%(((g->eBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
 }
}
}
}




int * ec_H= malloc(g->mpi_world_size*sizeof(int)*2);
ec_c= malloc(g->mpi_world_size*sizeof(int));
for(int i=0;i<g->mpi_world_size;i++)ec_c[i]=0;
    for (int b = edge_min; b < edge_max; b++)
      {
    for (int e = (0); e < (g->blkSize); e++)
      {
    for (int n = (0); n < 2; n++)
      {
 if (g->eCellBlk[n]->data_pointer.p2[b][e]>=g->cBlkCnt)continue;
 if (g->eCellBlk[n]->data_pointer.p2[b][e]<g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_min
     ||g->eCellBlk[n]->data_pointer.p2[b][e]>=g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_max)
 {
  ec_c[g->eCellBlk[n]->data_pointer.p2[b][e]/(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size)]++;
 }
}
}
}
  ec_H[0]=ec_c[0]+cn_H[g->mpi_world_size*2-2]*g->blkSize+cn_H[g->mpi_world_size*2-1];
  for(int i=1;i<g->mpi_world_size;i++)
  {
    ec_H[2*i]=ec_c[i]+ec_H[2*i-2];
  }
 ml =0;
 for(int i=0;i<g->mpi_world_size;i++)
 {
   ml+=ec_c[i];
 }
 ecell_map= malloc(ml*sizeof(int)*5);
  for(int i=0;i<g->mpi_world_size;i++)
  {
    ec_H[2*i+1]=ec_H[2*i]%g->blkSize;
    ec_H[2*i]=ec_H[2*i]/g->blkSize;
  }
 local_cell_blocks = ec_H[g->mpi_world_size*2-2]+1;

 tp[0]=cn_H[g->mpi_world_size*2-2];
 tp[1]=cn_H[g->mpi_world_size*2-1];
 for(int i=1;i<g->mpi_world_size;i++){tp[i*2]=ec_H[i*2-2];tp[i*2+1]=ec_H[i*2-1];}
 mi[0]=0;
 for(int i=1;i<g->mpi_world_size;i++)mi[i]=5*ec_c[i-1]+mi[i-1];
    for (int b = edge_min; b < edge_max; b++)
      {
    for (int e = (0); e < (g->blkSize); e++)
      {
    for (int n = (0); n < 2; n++)
      {
 if (g->eCellBlk[n]->data_pointer.p2[b][e]>=g->cBlkCnt||g->eCellBlk[n]->data_pointer.p2[b][e]<0){g->eCellBlk[n]->data_pointer.p2[b][e]=-1;}
 else if (g->eCellBlk[n]->data_pointer.p2[b][e]<g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_min
     ||g->eCellBlk[n]->data_pointer.p2[b][e]>=g->mpi_rank*((((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size))+cell_max)
 {
  int pn = g->eCellBlk[n]->data_pointer.p2[b][e]/(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
  ecell_map[mi[pn]++]=pn;
  ecell_map[mi[pn]++]=g->eCellBlk[n]->data_pointer.p2[b][e]%(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
  ecell_map[mi[pn]++]=g->eCellIdx[n]->data_pointer.p2[b][e];
  ecell_map[mi[pn]++]=tp[pn*2];
  ecell_map[mi[pn]++]=tp[pn*2+1];
  g->eCellBlk[n]->data_pointer.p2[b][e]=tp[pn*2];
  g->eCellIdx[n]->data_pointer.p2[b][e]=tp[pn*2+1];
  if(++tp[pn*2+1]==g->blkSize){tp[pn*2]++;tp[pn*2+1]=0;}
 }
 else
 {
   g->eCellBlk[n]->data_pointer.p2[b][e]=g->eCellBlk[n]->data_pointer.p2[b][e]%(((g->cBlkCnt) + g->mpi_world_size - 1) / g->mpi_world_size);
 }
}
}
}
free(tp);

 mpi_send_requests=malloc(g->mpi_world_size*2*sizeof(MPI_Request));
 mpi_recv_requests=&mpi_send_requests[g->mpi_world_size];
 mpi_send_requests[g->mpi_rank]=MPI_REQUEST_NULL;
 mpi_recv_requests[g->mpi_rank]=MPI_REQUEST_NULL;

 comm_tag=10;

cn_crem= malloc(g->mpi_world_size*sizeof(int));
ce_crem= malloc(g->mpi_world_size*sizeof(int));
ec_crem= malloc(g->mpi_world_size*sizeof(int));
 
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     MPI_Isend(&cn_c[pn],1,MPI_INT,pn,0,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(&cn_crem[pn],1,MPI_INT,pn,0,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
     MPI_Isend(&ce_c[pn],1,MPI_INT,pn,1,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(&ce_crem[pn],1,MPI_INT,pn,1,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
     MPI_Isend(&ec_c[pn],1,MPI_INT,pn,2,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(&ec_crem[pn],1,MPI_INT,pn,2,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
   else cn_c[g->mpi_rank]=ce_c[g->mpi_rank]=ec_c[g->mpi_rank]=cn_crem[g->mpi_rank]=ce_crem[g->mpi_rank]=ec_crem[g->mpi_rank]=0;
 }

 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);

 for(int i=1;i<g->mpi_world_size;i++)
 {
   cn_c[i]+=cn_c[i-1];
   cn_crem[i]+=cn_crem[i-1];
 }
 neighbor_maprem= malloc(cn_crem[g->mpi_world_size-1]*sizeof(int)*2);

 for(int i=1;i<g->mpi_world_size;i++)
 {
   ce_c[i]+=ce_c[i-1];
   ce_crem[i]+=ce_crem[i-1];
 }
 cedge_maprem= malloc(ce_crem[g->mpi_world_size-1]*sizeof(int)*2);

 for(int i=1;i<g->mpi_world_size;i++)
 {
   ec_c[i]+=ec_c[i-1];
   ec_crem[i]+=ec_crem[i-1];
 }
 ecell_maprem= malloc(ec_crem[g->mpi_world_size-1]*sizeof(int)*2);

 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     int* buf=malloc((cn_c[pn]-(pn?cn_c[pn-1]:0))*sizeof(int)*2);
     for(int i=0;i<(cn_c[pn]-(pn?cn_c[pn-1]:0));i++)
     {
       buf[2*i]= neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+1];
       buf[2*i+1]= neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+2];
     }
     MPI_Isend(buf,(cn_c[pn]-(pn?cn_c[pn-1]:0))*2,MPI_INT,pn,3,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(&neighbor_maprem[(pn?cn_crem[pn-1]*2:0)],(cn_crem[pn]-(pn?cn_crem[pn-1]:0))*2,MPI_INT,pn,3,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
     MPI_Wait(&mpi_recv_requests[pn],MPI_STATUS_IGNORE);
     MPI_Wait(&mpi_send_requests[pn],MPI_STATUS_IGNORE);
     free(buf);

     buf=malloc((ce_c[pn]-(pn?ce_c[pn-1]:0))*sizeof(int)*2);
     for(int i=0;i<(ce_c[pn]-(pn?ce_c[pn-1]:0));i++)
     {
       buf[2*i]= cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+1];
       buf[2*i+1]= cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+2];
     }
     MPI_Isend(buf,(ce_c[pn]-(pn?ce_c[pn-1]:0))*2,MPI_INT,pn,4,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(&cedge_maprem[(pn?ce_crem[pn-1]*2:0)],(ce_crem[pn]-(pn?ce_crem[pn-1]:0))*2,MPI_INT,pn,4,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
     MPI_Wait(&mpi_recv_requests[pn],MPI_STATUS_IGNORE);
     MPI_Wait(&mpi_send_requests[pn],MPI_STATUS_IGNORE);
     free(buf);

     buf=malloc((ec_c[pn]-(pn?ec_c[pn-1]:0))*sizeof(int)*2);
     for(int i=0;i<(ec_c[pn]-(pn?ec_c[pn-1]:0));i++)
     {
       buf[2*i]= ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+1];
       buf[2*i+1]= ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+2];
     }
     MPI_Isend(buf,(ec_c[pn]-(pn?ec_c[pn-1]:0))*2,MPI_INT,pn,5,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(&ecell_maprem[(pn?ec_crem[pn-1]*2:0)],(ec_crem[pn]-(pn?ec_crem[pn-1]:0))*2,MPI_INT,pn,5,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
     MPI_Wait(&mpi_recv_requests[pn],MPI_STATUS_IGNORE);
     MPI_Wait(&mpi_send_requests[pn],MPI_STATUS_IGNORE);
     free(buf);
   }
 }

 neighbor_2Dbufrem=malloc(g->mpi_world_size*sizeof(GVAL*));
 neighbor_3Dbufrem=malloc(g->mpi_world_size*sizeof(GVAL*));
 cedge_2Dbufrem=malloc(g->mpi_world_size*sizeof(GVAL*));
 cedge_3Dbufrem=malloc(g->mpi_world_size*sizeof(GVAL*));
 ecell_2Dbufrem=malloc(g->mpi_world_size*sizeof(GVAL*));
 ecell_3Dbufrem=malloc(g->mpi_world_size*sizeof(GVAL*));

 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     neighbor_2Dbufrem[pn]=malloc((cn_crem[pn]-(pn?cn_crem[pn-1]:0))*sizeof(GVAL));
     neighbor_3Dbufrem[pn]=malloc((cn_crem[pn]-(pn?cn_crem[pn-1]:0))*g->height*sizeof(GVAL));
     cedge_2Dbufrem[pn]=malloc((ce_crem[pn]-(pn?ce_crem[pn-1]:0))*sizeof(GVAL));
     cedge_3Dbufrem[pn]=malloc((ce_crem[pn]-(pn?ce_crem[pn-1]:0))*g->height*sizeof(GVAL));
     ecell_2Dbufrem[pn]=malloc((ec_crem[pn]-(pn?ec_crem[pn-1]:0))*sizeof(GVAL));
     ecell_3Dbufrem[pn]=malloc((ec_crem[pn]-(pn?ec_crem[pn-1]:0))*g->height*sizeof(GVAL));
   }
 }

 neighbor_2Dbuf=malloc(g->mpi_world_size*sizeof(GVAL*));
 neighbor_3Dbuf=malloc(g->mpi_world_size*sizeof(GVAL*));
 cedge_2Dbuf=malloc(g->mpi_world_size*sizeof(GVAL*));
 cedge_3Dbuf=malloc(g->mpi_world_size*sizeof(GVAL*));
 ecell_2Dbuf=malloc(g->mpi_world_size*sizeof(GVAL*));
 ecell_3Dbuf=malloc(g->mpi_world_size*sizeof(GVAL*));

 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     neighbor_2Dbuf[pn]=malloc((cn_c[pn]-(pn?cn_c[pn-1]:0))*sizeof(GVAL));
     neighbor_3Dbuf[pn]=malloc((cn_c[pn]-(pn?cn_c[pn-1]:0))*g->height*sizeof(GVAL));
     cedge_2Dbuf[pn]=malloc((ce_c[pn]-(pn?ce_c[pn-1]:0))*sizeof(GVAL));
     cedge_3Dbuf[pn]=malloc((ce_c[pn]-(pn?ce_c[pn-1]:0))*g->height*sizeof(GVAL));
     ecell_2Dbuf[pn]=malloc((ec_c[pn]-(pn?ec_c[pn-1]:0))*sizeof(GVAL));
     ecell_3Dbuf[pn]=malloc((ec_c[pn]-(pn?ec_c[pn-1]:0))*g->height*sizeof(GVAL));
   }
 }
}
ENDCOMMINITIALIZATION

COMMCODE:
SECTION (g->cNeighborBlk) 2D READ:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_crem[pn]-(pn?cn_crem[pn-1]:0));i++)
     {
       neighbor_2Dbufrem[pn][i]= $var_name[ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i] ][ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i+1] ];
     }
     MPI_Isend(neighbor_2Dbufrem[pn],(cn_crem[pn]-(pn?cn_crem[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(neighbor_2Dbuf[pn],(cn_c[pn]-(pn?cn_c[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_c[pn]-(pn?cn_c[pn-1]:0));i++)
     {
       $var_name[ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+3] ][ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+4] ] = neighbor_2Dbuf[pn][i];
     }
   }
 }
}
ENDSECTION

SECTION (g->cNeighborBlk) 3D READ:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_crem[pn]-(pn?cn_crem[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         neighbor_3Dbufrem[pn][g->height*i+k]= $var_name[ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i] ][k][ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i+1] ];
     }
     MPI_Isend(neighbor_3Dbufrem[pn],(cn_crem[pn]-(pn?cn_crem[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(neighbor_3Dbuf[pn],(cn_c[pn]-(pn?cn_c[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_c[pn]-(pn?cn_c[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         $var_name[ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+3] ][k][ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+4] ] = neighbor_3Dbuf[pn][g->height*i+k];
     }
   }
 }
}
ENDSECTION

SECTION (g->cEdgeBlk) 2D READ:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_crem[pn]-(pn?ce_crem[pn-1]:0));i++)
     {
       cedge_2Dbufrem[pn][i]= $var_name[ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i] ][ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i+1] ];
     }
     MPI_Isend(cedge_2Dbufrem[pn],(ce_crem[pn]-(pn?ce_crem[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(cedge_2Dbuf[pn],(ce_c[pn]-(pn?ce_c[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_c[pn]-(pn?ce_c[pn-1]:0));i++)
     {
       $var_name[ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+3] ][ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+4] ] = cedge_2Dbuf[pn][i];
     }
   }
 }
}
ENDSECTION

SECTION (g->cEdgeBlk) 3D READ:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_crem[pn]-(pn?ce_crem[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         cedge_3Dbufrem[pn][g->height*i+k]= $var_name[ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i] ][k][ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i+1] ];
     }
     MPI_Isend(cedge_3Dbufrem[pn],(ce_crem[pn]-(pn?ce_crem[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(cedge_3Dbuf[pn],(ce_c[pn]-(pn?ce_c[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_c[pn]-(pn?ce_c[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         $var_name[ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+3] ][k][ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+4] ] = cedge_3Dbuf[pn][g->height*i+k];
     }
   }
 }
}
ENDSECTION

SECTION (g->eCellBlk) 2D READ:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_crem[pn]-(pn?ec_crem[pn-1]:0));i++)
     {
       ecell_2Dbufrem[pn][i]= $var_name[ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i] ][ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i+1] ];
     }
     MPI_Isend(ecell_2Dbufrem[pn],(ec_crem[pn]-(pn?ec_crem[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(ecell_2Dbuf[pn],(ec_c[pn]-(pn?ec_c[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_c[pn]-(pn?ec_c[pn-1]:0));i++)
     {
       $var_name[ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+3] ][ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+4] ] = ecell_2Dbuf[pn][i];
     }
   }
 }
}
ENDSECTION

SECTION (g->eCellBlk) 3D READ:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_crem[pn]-(pn?ec_crem[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         ecell_3Dbufrem[pn][g->height*i+k]= $var_name[ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i] ][k][ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i+1] ];
     }
     MPI_Isend(ecell_3Dbufrem[pn],(ec_crem[pn]-(pn?ec_crem[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(ecell_3Dbuf[pn],(ec_c[pn]-(pn?ec_c[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_c[pn]-(pn?ec_c[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         $var_name[ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+3] ][k][ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+4] ] = ecell_3Dbuf[pn][g->height*i+k];
     }
   }
 }
}
ENDSECTION

SECTION (g->cNeighborBlk) 2D WRITE:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_c[pn]-(pn?cn_c[pn-1]:0));i++)
     {
       neighbor_2Dbuf[pn][i] = $var_name[ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+3] ][ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+4] ];
     }
     MPI_Isend(neighbor_2Dbuf[pn],(cn_c[pn]-(pn?cn_c[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(neighbor_2Dbufrem[pn],(cn_crem[pn]-(pn?cn_crem[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_crem[pn]-(pn?cn_crem[pn-1]:0));i++)
     {
       $var_name[ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i] ][ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i+1] ] = neighbor_2Dbufrem[pn][i];
     }
   }
 }
}
ENDSECTION

SECTION (g->cNeighborBlk) 3D WRITE:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_c[pn]-(pn?cn_c[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         neighbor_3Dbuf[pn][g->height*i+k] = $var_name[ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+3] ][k][ neighbor_map[(pn?cn_c[pn-1]*5:0)+5*i+4] ];
     }
     MPI_Isend(neighbor_3Dbuf[pn],(cn_c[pn]-(pn?cn_c[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(neighbor_3Dbufrem[pn],(cn_crem[pn]-(pn?cn_crem[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(cn_crem[pn]-(pn?cn_crem[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         $var_name[ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i] ][k][ neighbor_maprem[(pn?cn_crem[pn-1]*2:0)+2*i+1] ] = neighbor_3Dbufrem[pn][g->height*i+k];
     }
   }
 }
}
ENDSECTION

SECTION (g->cEdgeBlk) 2D WRITE:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_c[pn]-(pn?ce_c[pn-1]:0));i++)
     {
       cedge_2Dbuf[pn][i] = $var_name[ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+3] ][ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+4] ];
     }
     MPI_Isend(cedge_2Dbuf[pn],(ce_c[pn]-(pn?ce_c[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(cedge_2Dbufrem[pn],(ce_crem[pn]-(pn?ce_crem[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_crem[pn]-(pn?ce_crem[pn-1]:0));i++)
     {
       $var_name[ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i] ][ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i+1] ] = cedge_2Dbufrem[pn][i];
     }
   }
 }
}
ENDSECTION

SECTION (g->cEdgeBlk) 3D WRITE:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_c[pn]-(pn?ce_c[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         cedge_3Dbuf[pn][g->height*i+k] = $var_name[ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+3] ][k][ cedge_map[(pn?ce_c[pn-1]*5:0)+5*i+4] ];
     }
     MPI_Isend(cedge_3Dbuf[pn],(ce_c[pn]-(pn?ce_c[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(cedge_3Dbufrem[pn],(ce_crem[pn]-(pn?ce_crem[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ce_crem[pn]-(pn?ce_crem[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         $var_name[ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i] ][k][ cedge_maprem[(pn?ce_crem[pn-1]*2:0)+2*i+1] ] = cedge_3Dbufrem[pn][g->height*i+k];
     }
   }
 }
}
ENDSECTION

SECTION (g->eCellBlk) 2D WRITE:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_c[pn]-(pn?ec_c[pn-1]:0));i++)
     {
       ecell_2Dbuf[pn][i] = $var_name[ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+3] ][ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+4] ];
     }
     MPI_Isend(ecell_2Dbuf[pn],(ec_c[pn]-(pn?ec_c[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(ecell_2Dbufrem[pn],(ec_crem[pn]-(pn?ec_crem[pn-1]:0)),MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_crem[pn]-(pn?ec_crem[pn-1]:0));i++)
     {
       $var_name[ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i] ][ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i+1] ] = ecell_2Dbufrem[pn][i];
     }
   }
 }
}
ENDSECTION

SECTION (g->eCellBlk) 3D WRITE:
{
 comm_tag++;
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_c[pn]-(pn?ec_c[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         ecell_3Dbuf[pn][g->height*i+k] = $var_name[ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+3] ][k][ ecell_map[(pn?ec_c[pn-1]*5:0)+5*i+4] ];
     }
     MPI_Isend(ecell_3Dbuf[pn],(ec_c[pn]-(pn?ec_c[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_send_requests[pn]);
     MPI_Irecv(ecell_3Dbufrem[pn],(ec_crem[pn]-(pn?ec_crem[pn-1]:0))*g->height,MPI_FLOAT,pn,comm_tag,MPI_COMM_WORLD,&mpi_recv_requests[pn]);
   }
 }
 MPI_Waitall(g->mpi_world_size*2,mpi_send_requests,MPI_STATUSES_IGNORE);
 for(int pn=0;pn<g->mpi_world_size;pn++)
 {
   if(pn!=g->mpi_rank)
   {
     for(int i=0;i<(ec_crem[pn]-(pn?ec_crem[pn-1]:0));i++)
     {
       for(int k=0;k<g->height;k++)
         $var_name[ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i] ][k][ ecell_maprem[(pn?ec_crem[pn-1]*2:0)+2*i+1] ] = ecell_3Dbufrem[pn][g->height*i+k];
     }
   }
 }
}
ENDSECTION
ENDCOMMCODE

ENDCOMMUNICATION
